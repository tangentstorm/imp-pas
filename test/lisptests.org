
# tests borrowed from darkf's sexpr and lisplike packages for rust
# https://github.com/darkf/rust_sexpr
# MIT License https://github.com/darkf/rust_sexpr/blob/master/LICENSE.txt

* s-expressions

#+name: s-expressions
#+begin_src
> #! fmt: struct
> 123
n:123
> -123
n:-123
> 1
n:1
> ()
()
# this next one will parse but just get treated as a symbol.
> 3.14159265358
s:3.14159265358
> (hi)
(s:hi . ())
> (-hi)
(s:-hi . ())
> (-)
> x
x
> (1)
(1. ())
> (hi there)
(s:hi . (s:there . ()))
> (1 (2) 3)
(1 . ((2 . ()) . (3 . ())))
> (hi (there) you!)
(s:hi . ((s:there . ()) . (s:you! . ())))
> (hi 123456)
(s:hi . (n:123456 . ()))
> (hi (there (fellow (human-bot!))))
(s:hi . (s:there . (s:fellow (s:human-bot! . ()) . ()) . ()) . ())
#+end_src

* strings

#+name: strings
#+begin_src
> ""
""
> "string"
"string"
> "hi	there"
"hi\tthere"
> "a\\b"
"a\b"
> ("hello" "world")
("hello" . ("world" . ()))
# whitespace tests
>  (  1  )
(1 . ())
>   (  (  )  )
(() . ())
>
>
> (
> 
> 
> )
>
>
(() . ())
>
>
> (
> 
>
> 123
>
> )
>
(123 . ())
#+end_src


* identity function

#+name: id
#+begin_src
> (eval '123)
123
> (eval '(id 123))
123
> (eval '(id (id (id 123))))
123
#+end_src

* strings

#+name: id.strings
#+begin_src
> (id "hi")
"hi"
> (car (cons "a" "b"))
"a"
#+end_src

* cons
#+name: cons
#+begin_src
> (cons 1 2)
(1 2)
#+end_src

* car
#+name: car
#+begin_src
> (car (1 . 2))
1
#+end_src

* cdr
#+name: cdr
#+begin_src
> (cdr (1 . 2))
2
> (cdr (1 . (2 . (3 . ())))
(2 3)
#+end_src

* arithmetic
#+name: arithmetic
#+begin_src
> (+ 1 3)
4
> (+ 1.5 3)
4.5
> (+ 5 -3)
2
> (- 5 3)
2
> (- 3 5)
-2
> (- 5 -3)
8
> (* 2 5)
10
> (* 2 -5)
-10
> (/ 10 2)
5
> (/ 10 -2)
-5
> (+ 6 (+ 1 3))
10
> (- 6 (- 3 2))
5
> (+ 1 (+ 2 3) 4)
10
> (+ 5)
5
> (+ -5)
-5
#+end_src

* quote
#+name: quote
#+begin_src
> (quote 5)
5
> (quote x)
x
> (quote (1 2 3))
(1 2 3)
> (quote (quote x))
(quote x)
> (+ (quote 1) 2)
3
#+end_src


* def
#+name: def
#+begin_src
> (def (quote x) 5)
> (def (quote y) 10)
> x
5
> y
10
> (+ x y)
15
#+end_src

* apply
#+name: apply
#+begin_src
> (defun f (x) (+ 1 x))
> f
((x) (+ 1 x))
> (f 5)
6
#+end_src
